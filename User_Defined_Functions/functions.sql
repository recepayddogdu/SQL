CREATE FUNCTION DBO.TOPLA(@SAYI1 AS INT, @SAYI2 AS INT)
RETURNS INT
AS
BEGIN
	DECLARE @SONUC AS INT
	SET @SONUC=@SAYI1+@SAYI2
	RETURN @SONUC
END

SELECT DBO.TOPLA(8,10) --Fonksiyon calistirma
-------------------------------------------------------------
--Dogum tarihini alip yasini bulan fonksiyon
CREATE FUNCTION DBO.FINDAGE(@TARIH AS DATE)
RETURNS INT
AS
BEGIN
	DECLARE @YAS AS INT
	SET @YAS=DATEDIFF(YEAR,@TARIH,GETDATE())
	RETURN @YAS
END

SELECT DBO.FINDAGE('1999-11-13') AS YAS
-----------------------------------------------
--Bu fonksiyonu db uzerinde kullanalim
SELECT TOP 1000 USERNAME_, DBO.FINDAGE(BIRTHDATE) AS AGE
FROM USERS

-------------------------------------------------
--Urun Analizi
SELECT
ITM.ID,ITM.ITEMCODE URUNKODU, ITM.ITEMNAME URUNADI, MIN(OD.UNITPRICE) ENDUSUKFIYAT,
MAX(OD.UNITPRICE) ENYUKSEKFIYAT, AVG(OD.UNITPRICE) ORTALAMAFIYAT,
SUM(OD.LINETOTAL) TOPLAMSATISTUTAR,SUM(OD.AMOUNT) AS TOPLAMMIKTAR
FROM ORDERDETAILS OD
JOIN ITEMS ITM ON ITM.ID=OD.ITEMID
JOIN ORDERS O ON O.ID=OD.ORDERID
GROUP BY ITM.ID,ITM.ITEMCODE, ITM.ITEMNAME

--Bu sorguyu fonksiyon haline getirelim
CREATE FUNCTION DBO.GETITEM_TOTAL_SALE(@ITEMID AS INT)
RETURNS FLOAT
AS
BEGIN
	DECLARE @RESULT AS FLOAT
	SELECT @RESULT=SUM(LINETOTAL) FROM ORDERDETAILS OD WHERE OD.ITEMID=@ITEMID
	RETURN @RESULT
END

SELECT DBO.GETITEM_MIN_PRICE(152)
SELECT DBO.GETITEM_MAX_PRICE(152)
SELECT DBO.GETITEM_AVG_PRICE(152)
SELECT DBO.GETITEM_TOTAL_SALE(152)

--Simdi yukaridaki sorguyu fonksiyonlar ile yapalim
SELECT
ITM.ID, ITM.ITEMCODE, ITM.ITEMNAME,
DBO.GETITEM_MIN_PRICE(ITM.ID) ENDUSUKFIYAT, DBO.GETITEM_MAX_PRICE(ITM.ID) ENYUKESKFIYAT,
DBO.GETITEM_AVG_PRICE(ITM.ID) ORTALAMAFIYAT, DBO.GETITEM_TOTAL_SALE(ITM.ID) TOPLAMSATISTUTARI
FROM ORDERDETAILS OD
JOIN ITEMS ITM ON ITM.ID=OD.ITEMID
JOIN ORDERS O ON O.ID=OD.ORDERID
GROUP BY ITM.ID,ITM.ITEMCODE,ITM.ITEMNAME

UPDATE STATISTICS ORDERDETAILS
--------------------------------------------------------------------
--Az once yazdigimiz fonksiyonlari tek bir fonksiyon haline getirelim.
CREATE FUNCTION DBO.GETITEM_PRICE(@ITEMID AS INT, @PRICETYPE AS VARCHAR(10))
RETURNS FLOAT
AS
BEGIN
	DECLARE @RESULT AS FLOAT

	IF @PRICETYPE='MIN'
	BEGIN
		SELECT @RESULT=MIN(UNITPRICE) FROM ORDERDETAILS OD WHERE OD.ITEMID=@ITEMID
	END

	IF @PRICETYPE='MAX'
	BEGIN
	SELECT @RESULT=MAX(UNITPRICE) FROM ORDERDETAILS OD WHERE OD.ITEMID=@ITEMID
	END

	IF @PRICETYPE='AVG'
	BEGIN
		SELECT @RESULT=AVG(UNITPRICE) FROM ORDERDETAILS OD WHERE OD.ITEMID=@ITEMID
	END

	IF @PRICETYPE='TOTAL'
	BEGIN
		SELECT @RESULT=SUM(LINETOTAL) FROM ORDERDETAILS OD WHERE OD.ITEMID=@ITEMID
	END

	RETURN @RESULT
END
----------
SELECT
ITM.ID, ITM.ITEMCODE, ITM.ITEMNAME,
DBO.GETITEM_PRICE(ITM.ID, 'MIN') ENDUSUKFIYAT, DBO.GETITEM_PRICE(ITM.ID, 'MAX') ENYUKSEKFIYAT,
DBO.GETITEM_PRICE(ITM.ID, 'AVG') ORTALAMAFIYAT, DBO.GETITEM_PRICE(ITM.ID, 'TOTAL') TOPLAMSATISTUTARI
FROM ORDERDETAILS OD
JOIN ITEMS ITM ON ITM.ID=OD.ITEMID
JOIN ORDERS O ON O.ID=OD.ORDERID
GROUP BY ITM.ID,ITM.ITEMCODE,ITM.ITEMNAME

---------------------------------------------------------------

--Table Valued Funtions

CREATE FUNCTION DBO.GETITEM_INFO(@ITEMID INT)
RETURNS TABLE
AS
RETURN
(
	--BURAYA YAZACAGIMIZ SQL SORGUSUNU TABLO OLARAK DONDURECEKTIR.
	SELECT
	MIN(UNITPRICE) AS MINPRICE,
	MAX(UNITPRICE) AS MAXPRICE,
	AVG(UNITPRICE) AS AVGPRICE,
	SUM(LINETOTAL) AS TOTALSALE,
	SUM(AMOUNT) AS TOTALAMOUNT
	FROM ORDERDETAILS
	WHERE ITEMID=@ITEMID
)

SELECT * FROM DBO.GETITEM_INFO(152)

--Bu fonksiyonu artik bizim tablomuzla beraber kullanabiliriz.
--Bu islemi join yerine CROSS APPLY kullanarak yapariz.
SELECT
ITM.ID, ITM.ITEMCODE, ITM.ITEMNAME,
ITEMINFO.MINPRICE AS ENDUSUKFIYAT,
ITEMINFO.MAXPRICE AS ENYUKSEKFIYAT,
ITEMINFO.AVGPRICE AS ORTALAMAFIYAT,
ITEMINFO.TOTALAMOUNT AS SATISMIKTARI,
ITEMINFO.TOTALSALE AS TOPLAMSATISTUTARI
FROM ITEMS ITM
CROSS APPLY DBO.GETITEM_INFO(ITM.ID) AS ITEMINFO